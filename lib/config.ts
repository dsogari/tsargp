/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * The numeric value of an 8-bit color.
 */
export type NumericColor = number;

export interface V1 {
  /**
   * The schema URI.
   */
  $schema?: string;
  /**
   * The indentation level for each column.
   */
  indent?: {
    /**
     * The indentation level for the names column, relative to the beginning of the line.
     */
    names?: number;
    /**
     * The indentation level for the parameter column, relative to the end of the names column.
     */
    param?: number;
    /**
     * The indentation level for the description column, relative to the end of the parameter column.
     */
    desc?: number;
    /**
     * The indentation level for the parameter column, relative to the beginning of the line.
     */
    paramAbsolute?: number;
    /**
     * The indentation level for the description column, relative to the beginning of the line.
     */
    descAbsolute?: number;
  };
  /**
   * The number of line breaks to insert before each column.
   */
  breaks?: {
    /**
     * The number of line breaks to insert before the names column.
     */
    names?: number;
    /**
     * The number of line breaks to insert before the parameter column.
     */
    param?: number;
    /**
     * The number of line breaks to insert before the description column.
     */
    desc?: number;
  };
  /**
   * Select individual columns that should not be displayed.
   */
  hidden?: {
    /**
     * Hide the names column.
     */
    names?: boolean;
    /**
     * Hide the parameter column.
     */
    param?: boolean;
    /**
     * Hide the description column.
     */
    desc?: boolean;
  };
  /**
   * The default option styles and the styles of other elements.
   */
  styles?: {
    names?: HelpStyle;
    param?: HelpStyle;
    desc?: HelpStyle;
    regex?: HelpStyle;
    boolean?: HelpStyle;
    string?: HelpStyle;
    number?: HelpStyle;
    option?: HelpStyle;
    whitespace?: HelpStyle;
  };
  /**
   * The order of items to be shown in the option description.
   */
  items?: HelpItem[];
}
/**
 * A style for displaying text on the console.
 */
export interface HelpStyle {
  /**
   * True to clear any previous style.
   */
  clear?: boolean;
  /**
   * The name or numeric value of a foreground color.
   */
  fg?: NamedColor | NumericColor;
  /**
   * The name or numeric value of a background color.
   */
  bg?: NamedColor | NumericColor;
  /**
   * The names of predefined type faces.
   */
  tf?: TypeFace[];
  /**
   * The name of a predefined font family.
   */
  ff?: FontFamily;
}

/**
 * The name of a predefined color.
 */
export const enum NamedColor {
  black = 'black',
  red = 'red',
  green = 'green',
  yellow = 'yellow',
  blue = 'blue',
  magenta = 'magenta',
  cyan = 'cyan',
  white = 'white',
  default = 'default',
  brightBlack = 'brightBlack',
  brightRed = 'brightRed',
  brightGreen = 'brightGreen',
  brightYellow = 'brightYellow',
  brightBlue = 'brightBlue',
  brightMagenta = 'brightMagenta',
  brightCyan = 'brightCyan',
  brightWhite = 'brightWhite',
}
/**
 * The name of a predefined type face.
 */
export const enum TypeFace {
  bold = 'bold',
  faint = 'faint',
  italic = 'italic',
  underline = 'underline',
  slowBlink = 'slowBlink',
  rapidBlink = 'rapidBlink',
  invert = 'invert',
  conceal = 'conceal',
  strike = 'strike',
  noBold = 'noBold',
  noFaint = 'noFaint',
  noItalic = 'noItalic',
  noUnderline = 'noUnderline',
  noBlink = 'noBlink',
  space = 'space',
  noInvert = 'noInvert',
  noConceal = 'noConceal',
  noStrike = 'noStrike',
  noSpace = 'noSpace',
  frame = 'frame',
  encircle = 'encircle',
  overline = 'overline',
  noFrame = 'noFrame',
  noEncircle = 'noEncircle',
  noOverline = 'noOverline',
  superscript = 'superscript',
  subscript = 'subscript',
  noSuperscript = 'noSuperscript',
  noSubscript = 'noSubscript',
}
/**
 * The name of a predefined font family.
 */
export const enum FontFamily {
  primary = 'primary',
  alternative1 = 'alternative1',
  alternative2 = 'alternative2',
  alternative3 = 'alternative3',
  alternative4 = 'alternative4',
  alternative5 = 'alternative5',
  alternative6 = 'alternative6',
  alternative7 = 'alternative7',
  alternative8 = 'alternative8',
  alternative9 = 'alternative9',
  gothic = 'gothic',
}
/**
 * The kind of items that can be shown in the option description.
 */
export const enum HelpItem {
  desc = 'desc',
  negation = 'negation',
  separator = 'separator',
  multivalued = 'multivalued',
  positional = 'positional',
  append = 'append',
  trim = 'trim',
  case = 'case',
  round = 'round',
  enums = 'enums',
  regex = 'regex',
  range = 'range',
  unique = 'unique',
  limit = 'limit',
  requires = 'requires',
  required = 'required',
  default = 'default',
  deprecated = 'deprecated',
}
