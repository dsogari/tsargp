//--------------------------------------------------------------------------------------------------
// Imports
//--------------------------------------------------------------------------------------------------
import type {
  Options,
  OptionValues,
  OpaqueOptionValues,
  Requires,
  RequiresEntry,
  ResolveCallback,
  OpaqueOption,
  OpaqueOptions,
} from './options';
import type {
  OptionInfo,
  ConcreteConfig,
  ValidatorConfig,
  ValidationFlags,
  ValidationResult,
} from './validator';

import { ConnectiveWords, ErrorItem } from './enums';
import { HelpFormatter, HelpSections } from './formatter';
import {
  RequiresAll,
  RequiresNot,
  RequiresOne,
  isArray,
  isVariadic,
  isNiladic,
  isMessage,
  isString,
  isBoolean,
  isUnknown,
} from './options';
import {
  HelpMessage,
  WarnMessage,
  CompletionMessage,
  TerminalString,
  FormattingFlags,
} from './styles';
import { OptionValidator, defaultConfig } from './validator';
import { format } from './styles';
import { checkRequiredArray, findSimilarNames, getArgs, isTrue, isComp } from './utils';

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
/**
 * The default help sections.
 */
const defaultSections: HelpSections = [
  { type: 'usage', title: 'Usage:', indent: 2 },
  { type: 'groups', title: 'Options', phrase: '%s:' },
];

//--------------------------------------------------------------------------------------------------
// Public types
//--------------------------------------------------------------------------------------------------
/**
 * The parsing flags.
 */
export type ParsingFlags = {
  /**
   * The program name.
   */
  readonly progName?: string;
  /**
   * The completion index of a raw command line.
   */
  readonly compIndex?: number;
  /**
   * True if the first argument is expected to be an option cluster (i.e., short-option style).
   */
  readonly shortStyle?: boolean;
};

/**
 * The parsing result.
 */
export type ParsingResult = {
  /**
   * The warnings generated by the parser, if any.
   */
  readonly warning?: WarnMessage;
};

/**
 * The command line or command-line arguments.
 */
export type CommandLine = string | Array<string>;

//--------------------------------------------------------------------------------------------------
// Internal types
//--------------------------------------------------------------------------------------------------
/**
 * Information about the current argument sequence in the parsing loop.
 */
type ParseEntry = [
  index: number,
  info?: OptionInfo,
  value?: string,
  comp?: boolean,
  marker?: boolean,
  lookFor?: boolean,
];

//--------------------------------------------------------------------------------------------------
// Classes
//--------------------------------------------------------------------------------------------------
/**
 * Implements parsing of command-line arguments into option values.
 * @template T The type of the option definitions
 */
export class ArgumentParser<T extends Options = Options> {
  private readonly validator: OptionValidator;

  /**
   * Creates an argument parser based on a set of option definitions.
   * @param options The option definitions
   * @param config The validator configuration
   */
  constructor(options: T, config: ValidatorConfig = {}) {
    const concreteConfig: ConcreteConfig = {
      styles: Object.assign({}, defaultConfig.styles, config.styles),
      phrases: Object.assign({}, defaultConfig.phrases, config.phrases),
      connectives: Object.assign({}, defaultConfig.connectives, config.connectives),
    };
    this.validator = new OptionValidator(options, concreteConfig);
  }

  /**
   * Validates the option definitions.
   * This should only be called during development and testing, but skipped in production.
   * @param flags The validation flags
   * @returns The validation result
   */
  validate(flags?: ValidationFlags): ValidationResult {
    return this.validator.validate(flags);
  }

  /**
   * Parses command-line arguments into option values.
   * @param command The raw command line or command-line arguments
   * @param flags The parsing flags
   * @returns The options' values
   */
  async parse(command?: CommandLine, flags?: ParsingFlags): Promise<OptionValues<T>> {
    const values = {} as OptionValues<T>;
    await this.parseInto(values, command, flags);
    return values;
  }

  /**
   * Parses command-line arguments into option values.
   * @param values The options' values to parse into
   * @param command The raw command line or command-line arguments
   * @param flags The parsing flags
   * @returns The parsing result
   */
  async parseInto(
    values: OptionValues<T>,
    command?: CommandLine,
    flags?: ParsingFlags,
  ): Promise<ParsingResult> {
    return doParse(this.validator, values, command, flags);
  }
}

//--------------------------------------------------------------------------------------------------
// Functions
//--------------------------------------------------------------------------------------------------
/**
 * Parses the command-line arguments.
 * @param validator The option validator
 * @param values The option values
 * @param command The raw command line or command-line arguments
 * @param flags The parsing flags
 * @returns The parsing result
 */
async function doParse(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  command = process?.env['COMP_LINE'] ?? process?.argv.slice(2) ?? [],
  flags: ParsingFlags = { compIndex: Number(process?.env['COMP_POINT']) },
): Promise<ParsingResult> {
  let args, progName;
  if (typeof command === 'string') {
    [progName, ...args] = getArgs(command, flags.compIndex);
  } else {
    [progName, args] = [flags.progName, command];
    if (progName === undefined) {
      progName = process?.argv[1].split(/[\\/]/).at(-1);
    }
  }
  const completing = (flags.compIndex ?? -1) >= 0;
  if (!completing && progName && process?.title) {
    process.title += ' ' + progName;
  }
  if (flags.shortStyle) {
    parseCluster(validator, args);
  }
  initValues(validator.options, values);
  const specifiedKeys = new Set<string>();
  const warning = new WarnMessage();
  if (await parseArgs(validator, values, args, specifiedKeys, completing, warning, progName)) {
    await checkRequired(validator, values, specifiedKeys);
  }
  return warning.length ? { warning } : {};
}

/**
 * Initializes the option values.
 * @param options The option definitions
 * @param values The option values
 */
function initValues(options: OpaqueOptions, values: OpaqueOptionValues) {
  for (const key in options) {
    const option = options[key];
    if (!(key in values) && (!isMessage(option) || option.saveMessage)) {
      values[key] = undefined;
    }
  }
}

/**
 * Parses the first argument which is expected to be an option cluster.
 * @param validator The option validator
 * @param args The command-line arguments
 */
function parseCluster(validator: OptionValidator, args: Array<string>) {
  const cluster = args.shift();
  if (!cluster) {
    return;
  }
  for (let j = 0, i = 0; j < cluster.length; ++j) {
    const letter = cluster[j];
    if (letter === '-' && j == 0) {
      continue; // skip the first dash in the cluster
    }
    if (letter === '\0') {
      throw new CompletionMessage();
    }
    const key = validator.letters.get(letter);
    if (!key) {
      throw validator.error(ErrorItem.unknownOption, { o: letter }, { alt: 0 });
    }
    const option = validator.options[key];
    if (j < cluster.length - 1 && (option.type === 'command' || isVariadic(option))) {
      throw validator.error(ErrorItem.invalidClusterOption, { o: letter });
    }
    const name = option.names?.find((name) => name);
    if (!name) {
      continue; // skip options with no names
    }
    args.splice(i, 0, name);
    i += isNiladic(option) ? 1 : 2;
  }
}

/**
 * Reads the value of an environment variable.
 * @param validator The option validator
 * @param values The options' values to parse into
 * @param info The option information
 * @returns True if the environment variable was found
 */
async function readEnvVar(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  info: OptionInfo,
): Promise<boolean> {
  const { key, option, name } = info;
  const value = process?.env[name];
  if (value !== undefined) {
    if (option.type === 'flag') {
      values[key] = isTrue(value);
    } else {
      await parseParam(validator, values, false, NaN, info, [value]);
    }
    return true;
  }
  return false;
}

/**
 * Parses the command-line arguments.
 * @param validator The option validator
 * @param values The option values
 * @param args The command-line arguments
 * @param specifiedKeys The set of specified keys
 * @param completing True if performing completion
 * @param warning The warnings accumulated so far
 * @param progName The program name, if any
 * @returns True if requirements should be checked
 */
async function parseArgs(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  args: ReadonlyArray<string>,
  specifiedKeys: Set<string>,
  completing: boolean,
  warning: WarnMessage,
  progName?: string,
): Promise<boolean> {
  let prev: ParseEntry = [-1];
  let positional = false;
  for (let i = 0, k = 0; i < args.length; i = prev[0]) {
    const next = findNext(validator, args, prev);
    const [j, info, value, comp, marker] = next;
    if (prev[1] !== info) {
      if (prev[1]) {
        await handleNonNiladic(validator, values, completing, prev[1], i, args.slice(k, j));
      }
      if (!info) {
        break; // finished
      }
      prev = next;
      const { key, name, option } = info;
      const niladic = isNiladic(option);
      const hasValue = value !== undefined;
      if (niladic || marker) {
        if (comp) {
          throw new CompletionMessage();
        }
        if (hasValue) {
          if (completing) {
            // ignore inline parameters of niladic options or positional marker while completing
            prev[1] = undefined;
            prev[4] = false;
            continue;
          }
          const alt = marker ? 1 : 0;
          const name2 = marker ? info.marker : name;
          throw validator.error(ErrorItem.disallowedInlineValue, { o: name2 }, { alt });
        }
      }
      if (!completing && !specifiedKeys.has(key)) {
        if (option.deprecated) {
          warning.push(validator.format(ErrorItem.deprecatedOption, { o: name }));
        }
        specifiedKeys.add(key);
      }
      if (niladic) {
        // comp === false
        const [breakLoop, skipCount] = await handleNiladic(
          validator,
          values,
          specifiedKeys,
          completing,
          j,
          args.slice(j + 1),
          info,
          warning,
          progName,
        );
        if (breakLoop) {
          return false;
        }
        prev[0] += skipCount;
        prev[1] = undefined;
        continue; // fetch more
      }
      // don't use option.positional for this check
      positional = info === validator.positional;
      if (!comp) {
        if (positional || !hasValue) {
          // positional marker, first positional parameter or option name
          k = hasValue ? j : j + 1;
        } else {
          // option name with inline parameter
          await handleNonNiladic(validator, values, completing, info, j, [value]);
          prev[1] = undefined;
        }
        continue; // fetch more
      }
      // perform completion of first positional or inline parameter
      k = j;
    }
    if (!info) {
      break; // finished
    }
    // comp === true
    await handleComplete(values, info, i, args.slice(k, j), value);
    handleCompletion(info.option, value);
    if (!marker && (positional || k < j || info.option.fallback !== undefined)) {
      handleNameCompletion(validator, value);
    }
    throw new CompletionMessage();
  }
  return !completing;
}

/**
 * Finds the next option or word to complete in the command-line arguments.
 * @param validator The option validator
 * @param args The command-line arguments
 * @param prev The previous parse entry
 * @returns The new parse entry
 */
function findNext(
  validator: OptionValidator,
  args: ReadonlyArray<string>,
  prev: ParseEntry,
): ParseEntry {
  let [index, info, , , marker, lookFor] = prev;
  const positional = validator.positional;
  const variadic = info ? isVariadic(info.option) : false;
  for (++index; index < args.length; ++index) {
    const [arg, rest] = args[index].split('\0', 2);
    const comp = rest !== undefined;
    if (!info || lookFor) {
      const [name, value] = arg.split(/=(.*)/, 2);
      const key = validator.names.get(name);
      if (key) {
        if (comp && value === undefined) {
          throw new CompletionMessage(name);
        }
        const isMarker = name === positional?.marker;
        info = isMarker ? positional : { key, name, option: validator.options[key] };
        lookFor = !isMarker && info.option.fallback !== undefined;
        return [index, info, value, comp, isMarker, lookFor];
      }
      if (!info) {
        if (!positional) {
          if (comp) {
            handleNameCompletion(validator, arg);
          }
          handleUnknownName(validator, name);
        }
        return [index, positional, arg, comp, false, true];
      }
    }
    if (comp) {
      return [index, info, arg, comp, marker];
    }
    if (!marker) {
      if (variadic) {
        lookFor = true;
      } else {
        info = undefined;
      }
    }
  }
  return [index];
}

/**
 * Handles a non-niladic option.
 * @param validator The option validator
 * @param values The option values
 * @param comp True if performing completion
 * @param info The option information
 * @param index The starting index of the argument sequence
 * @param params The option parameters, if any
 * @returns A promise that must be awaited before continuing
 */
async function handleNonNiladic(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  comp: boolean,
  info: OptionInfo,
  index: number,
  params: Array<string>,
) {
  if (params.length) {
    try {
      // use await here instead of return, in order to catch errors
      await parseParam(validator, values, comp, index, info, params);
    } catch (err) {
      // do not propagate errors during completion
      if (!comp) {
        throw err;
      }
    }
  } else {
    const { key, option, name } = info;
    const fallback = option.fallback;
    if (fallback !== undefined) {
      return setValue(validator, values, key, option, fallback);
    } else if (!comp) {
      throw validator.error(ErrorItem.missingParameter, { o: name });
    }
  }
}

/**
 * Resolve a package version using a module-resolve function.
 * @param validator The option validator
 * @param resolve The resolve callback
 * @returns The version string
 */
async function resolveVersion(
  validator: OptionValidator,
  resolve: ResolveCallback,
): Promise<string> {
  const { promises } = await import('fs');
  for (
    let path = './package.json', lastResolved = '', resolved = resolve(path);
    resolved != lastResolved;
    path = '../' + path, lastResolved = resolved, resolved = resolve(path)
  ) {
    try {
      const jsonData = await promises.readFile(new URL(resolved));
      const { version } = JSON.parse(jsonData.toString());
      return version;
    } catch (err) {
      if ((err as ErrnoException).code != 'ENOENT') {
        throw err;
      }
    }
  }
  throw validator.error(ErrorItem.missingPackageJson);
}

/**
 * Handles the completion of an option with a parameter.
 * @param option The option definition
 * @param comp The word being completed
 */
function handleCompletion(option: OpaqueOption, comp = '') {
  let words =
    option.type === 'boolean'
      ? ['true', 'false']
      : option.enums
        ? option.enums.map((val) => `${val}`)
        : [];
  if (words.length && comp) {
    words = words.filter((word) => word.startsWith(comp));
  }
  if (words.length) {
    throw new CompletionMessage(...words);
  }
}

/**
 * Handles an unknown option name.
 * @param validator The option validator
 * @param name The unknown option name
 */
function handleUnknownName(validator: OptionValidator, name: string): never {
  const similar = findSimilarNames(name, [...validator.names.keys()], 0.6);
  const [args, alt] = similar.length ? [{ o1: name, o2: similar }, 1] : [{ o: name }, 0];
  const flags: FormattingFlags = { alt, sep: ',' };
  throw validator.error(ErrorItem.unknownOption, args, flags);
}

/**
 * Handles the completion of an option name.
 * @param validator The option validator
 * @param prefix The name prefix, if any
 */
function handleNameCompletion(validator: OptionValidator, prefix?: string): never {
  const names = [...validator.names.keys()];
  const prefixedNames = prefix ? names.filter((name) => name.startsWith(prefix)) : names;
  throw new CompletionMessage(...prefixedNames);
}

/**
 * Checks the items of a requirement expression or object.
 * @param validator The option validator
 * @param items The list of requirement items
 * @param itemFn The callback to execute on each item
 * @param error The terminal string error
 * @param negate True if the requirement should be negated
 * @param invert True if the requirements should be inverted
 * @param and If true, return on the first error; else return on the first success
 * @returns True if the requirement was satisfied
 */
async function checkRequireItems<T>(
  validator: OptionValidator,
  items: Array<T>,
  itemFn: (
    item: T,
    error: TerminalString,
    negate: boolean,
    invert: boolean,
  ) => boolean | Promise<boolean>,
  error: TerminalString,
  negate: boolean,
  invert: boolean,
  and: boolean,
): Promise<boolean> {
  if (!and && items.length > 1) {
    error.addOpening('(');
  }
  const config = validator.config;
  const connective = invert
    ? config.connectives[ConnectiveWords.and]
    : config.connectives[ConnectiveWords.or];
  let first = true;
  for (const item of items) {
    if (and || first) {
      first = false;
    } else {
      error.addWord(connective);
    }
    const success = await itemFn(item, error, negate, invert);
    if (success !== and) {
      return success;
    }
  }
  if (and) {
    return true;
  }
  if (items.length > 1) {
    error.addClosing(')');
  }
  return false;
}

/**
 * Parses the value of an option parameter.
 * @param validator The option validator
 * @param values The option values
 * @param comp True if performing completion
 * @param index The starting index of the argument sequence
 * @param info The option information
 * @param params The option parameter(s)
 */
async function parseParam(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  comp: boolean,
  index: number,
  info: OptionInfo,
  params: Array<string>,
) {
  /** @ignore */
  function norm<T>(val: T) {
    return validator.normalize(option, name, val);
  }
  const { key, name, option } = info;
  const convertFn: (val: string) => unknown =
    option.type === 'boolean' ? isTrue : isString(option) ? (str: string) => str : Number;
  const parse = option.parse;
  const lastParam = params[params.length - 1];
  let value;
  if (isArray(option)) {
    const param = option.separator ? lastParam.split(option.separator) : params;
    if (parse) {
      const seq = { values, index, name, param, comp };
      value = ((await parse(seq)) as Array<unknown>).map(norm);
    } else {
      value = option.append ? (values[key] as Array<unknown>) ?? [] : [];
      value.push(...param.map(convertFn).map(norm));
    }
  } else {
    const seq = { values, index, name, param: lastParam, comp };
    value = parse ? await parse(seq) : convertFn(lastParam);
  }
  values[key] = norm(value);
}

/**
 * Sets the normalized value of an option.
 * @param validator The option validator
 * @param values The option values
 * @param key The option key
 * @param option The option definition
 * @param value The option value
 */
async function setValue(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  key: string,
  option: OpaqueOption,
  value: unknown,
) {
  /** @ignore */
  function norm<T>(val: T) {
    return validator.normalize(option, key, val);
  }
  const resolved = typeof value === 'function' ? await value(values) : value;
  values[key] =
    isUnknown(option) || isBoolean(option)
      ? resolved
      : isArray(option)
        ? norm(resolved.map(norm))
        : norm(resolved);
}

/**
 * Handles a niladic option.
 * @param validator The option validator
 * @param values The option values
 * @param specifiedKeys The set of specified keys
 * @param comp True if performing completion
 * @param index The starting index of the argument sequence
 * @param rest The remaining command-line arguments
 * @param info The option information
 * @param warning The warnings accumulated so far
 * @param progName The program name
 * @returns [True if the parsing loop should be broken, number of additional processed arguments]
 */
async function handleNiladic(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  specifiedKeys: Set<string>,
  comp: boolean,
  index: number,
  rest: Array<string>,
  info: OptionInfo,
  warning: WarnMessage,
  progName?: string,
): Promise<[boolean, number]> {
  const { key, option, name } = info;
  switch (option.type) {
    case 'flag': {
      values[key] = !option.negationNames?.includes(name);
      return [false, 0];
    }
    case 'function': {
      const breakLoop = !!option.break && !comp;
      if (breakLoop) {
        await checkRequired(validator, values, specifiedKeys);
      }
      const skipCount = await handleFunction(values, comp, index, rest, info);
      return [breakLoop, skipCount];
    }
    case 'command': {
      if (!comp) {
        await checkRequired(validator, values, specifiedKeys);
      }
      const res = await handleCommand(validator, values, comp, index, rest, info);
      if (res.warning) {
        warning.push(...res.warning);
      }
      return [true, 0];
    }
    default: {
      // skip message-valued options during completion
      if (!comp) {
        await handleMessage(validator, values, rest, option, key, progName);
      }
      return [!comp, 0];
    }
  }
}

/**
 * Handles a function option.
 * @param values The option values
 * @param comp True if performing completion
 * @param index The starting index of the argument sequence
 * @param param The remaining command-line arguments
 * @param info The option information
 * @returns The number of additional processed arguments
 */
async function handleFunction(
  values: OpaqueOptionValues,
  comp: boolean,
  index: number,
  param: Array<string>,
  info: OptionInfo,
): Promise<number> {
  const { key, option, name } = info;
  if (option.exec) {
    try {
      values[key] = await option.exec({ values, index, name, param, comp, isComp });
    } catch (err) {
      // do not propagate common errors during completion
      if (!comp || err instanceof CompletionMessage) {
        throw err;
      }
      return 0;
    }
  }
  return comp ? 0 : Math.max(0, option.skipCount ?? 0);
}

/**
 * Handles a command option.
 * @param validator The option validator
 * @param values The option values
 * @param comp True if performing completion
 * @param index The starting index of the argument sequence
 * @param rest The remaining command-line arguments
 * @param info The option information
 * @returns The result of parsing the command arguments
 */
async function handleCommand(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  comp: boolean,
  index: number,
  rest: Array<string>,
  info: OptionInfo,
): Promise<ParsingResult> {
  const { key, option, name } = info;
  const { options, shortStyle } = option;
  const cmdOptions = typeof options === 'function' ? options() : options ?? {};
  const cmdValidator = new OptionValidator(cmdOptions, validator.config);
  const param: OpaqueOptionValues = {};
  const result = await doParse(cmdValidator, param, rest, {
    compIndex: comp ? 1 : -1,
    progName: name,
    shortStyle,
  });
  // comp === false, otherwise completion will have taken place by now
  if (option.exec) {
    values[key] = await option.exec({ values, index, name, param });
  }
  return result;
}

/**
 * Handles a message-valued option.
 * @param validator The option validator
 * @param values The option values
 * @param rest The remaining command-line arguments
 * @param option The option definition
 * @param key The option key
 * @param progName The program name
 * @throws The help or version message
 */
async function handleMessage(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  rest: Array<string>,
  option: OpaqueOption,
  key: string,
  progName?: string,
) {
  const message =
    option.type === 'help'
      ? handleHelp(validator, rest, option, progName)
      : option.resolve
        ? await resolveVersion(validator, option.resolve)
        : option.version ?? '';
  if (option.saveMessage) {
    values[key] = message;
  } else {
    throw message;
  }
}

/**
 * Handles a help option.
 * @param validator The option validator
 * @param rest The remaining command-line arguments
 * @param option The option definition
 * @param progName The program name
 * @returns The help message
 */
function handleHelp(
  validator: OptionValidator,
  rest: Array<string>,
  option: OpaqueOption,
  progName?: string,
): HelpMessage {
  const format = option.format ?? {};
  if (option.useFilters) {
    format.filters = rest.map((arg) => RegExp(arg, 'i'));
  }
  const formatter = new HelpFormatter(validator, format);
  const sections = option.sections ?? defaultSections;
  return formatter.formatSections(sections, progName);
}

/**
 * Handles the completion of an option with a custom completion callback.
 * @param values The option values
 * @param info The option information
 * @param index The starting index of the argument sequence
 * @param param The preceding parameters, if any
 * @param comp The word being completed
 */
async function handleComplete(
  values: OpaqueOptionValues,
  info: OptionInfo,
  index: number,
  param: Array<string>,
  comp = '',
) {
  const { name, option } = info;
  if (option.complete) {
    let words;
    try {
      words = await option.complete({ values, index, name, param, comp });
    } catch (err) {
      // do not propagate errors during completion
      throw new CompletionMessage();
    }
    throw new CompletionMessage(...words);
  }
}

/**
 * Checks if required options were correctly specified.
 * This should only be called when completion is not in effect.
 * @param validator The option validator
 * @param values The option values
 * @param specifiedKeys The set of specified keys
 */
async function checkRequired(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  specifiedKeys: Set<string>,
) {
  /** @ignore */
  function checkEnv(key: string) {
    return checkEnvVarAndDefaultValue(validator, values, specifiedKeys, key);
  }
  /** @ignore */
  function checkReq(key: string) {
    return checkRequiredOption(validator, values, specifiedKeys, key);
  }
  const keys = Object.keys(validator.options);
  await Promise.all(keys.map(checkEnv));
  await Promise.all(keys.map(checkReq));
}

/**
 * Checks if there is an environment variable or default value for an option.
 * @param validator The option validator
 * @param values The option values
 * @param specifiedKeys The set of specified keys
 * @param key The option key
 * @returns A promise that must be awaited before continuing
 */
async function checkEnvVarAndDefaultValue(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  specifiedKeys: Set<string>,
  key: string,
) {
  if (specifiedKeys.has(key)) {
    return;
  }
  const option = validator.options[key];
  const envVar = option.envVar;
  if (envVar && (await readEnvVar(validator, values, { key, option, name: envVar }))) {
    specifiedKeys.add(key);
  } else if (option.required) {
    const name = option.preferredName ?? '';
    throw validator.error(ErrorItem.missingRequiredOption, { o: name });
  } else if ('default' in option) {
    if (option.default === undefined) {
      values[key] = undefined;
    } else {
      return setValue(validator, values, key, option, option.default);
    }
  }
}

/**
 * Checks the requirements of an option.
 * @param validator The option validator
 * @param values The option values
 * @param specifiedKeys The set of specified keys
 * @param key The option key
 */
async function checkRequiredOption(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  specifiedKeys: Set<string>,
  key: string,
) {
  /** @ignore */
  function check(requires: Requires, negate: boolean, invert: boolean) {
    return checkRequires(validator, values, specifiedKeys, requires, error, negate, invert);
  }
  const option = validator.options[key];
  const specified = specifiedKeys.has(key);
  const error = new TerminalString();
  if (
    (specified && option.requires && !(await check(option.requires, false, false))) ||
    (!specified && option.requiredIf && !(await check(option.requiredIf, true, true)))
  ) {
    const name = option.preferredName ?? '';
    const kind = specified
      ? ErrorItem.unsatisfiedRequirement
      : ErrorItem.unsatisfiedCondRequirement;
    throw validator.error(kind, { o: name, p: error });
  }
}

/**
 * Checks the requirements of an option that was specified.
 * @param validator The option validator
 * @param values The option values
 * @param specifiedKeys The set of specified keys
 * @param requires The option requirements
 * @param error The terminal string error
 * @param negate True if the requirements should be negated
 * @param invert True if the requirements should be inverted
 * @returns True if the requirements were satisfied
 */
async function checkRequires(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  specifiedKeys: Set<string>,
  requires: Requires,
  error: TerminalString,
  negate: boolean,
  invert: boolean,
): Promise<boolean> {
  /** @ignore */
  function checkItem(requires: Requires, error: TerminalString, negate: boolean, invert: boolean) {
    return checkRequires(validator, values, specifiedKeys, requires, error, negate, invert);
  }
  /** @ignore */
  function checkEntry(
    entry: RequiresEntry,
    error: TerminalString,
    negate: boolean,
    invert: boolean,
  ) {
    return checkRequirement(validator, values, specifiedKeys, entry, error, negate, invert);
  }
  if (typeof requires === 'string') {
    return checkEntry([requires, undefined], error, negate, invert);
  }
  if (requires instanceof RequiresNot) {
    return checkItem(requires.item, error, !negate, invert);
  }
  if (requires instanceof RequiresAll || requires instanceof RequiresOne) {
    const and = requires instanceof RequiresAll !== negate;
    return checkRequireItems(validator, requires.items, checkItem, error, negate, invert, and);
  }
  if (typeof requires === 'object') {
    const entries = Object.entries(requires);
    return checkRequireItems(validator, entries, checkEntry, error, negate, invert, !negate);
  }
  if ((await requires(values)) == negate) {
    if (negate != invert) {
      error.addWord(validator.config.connectives[ConnectiveWords.not]);
    }
    format.v(requires, validator.config.styles, error);
    return false;
  }
  return true;
}

/**
 * Checks if a required option was specified with correct values.
 * @param validator The option validator
 * @param values The option values
 * @param specifiedKeys The set of specified keys
 * @param entry The required option key and value
 * @param error The terminal string error
 * @param negate True if the requirement should be negated
 * @param invert True if the requirements should be inverted
 * @returns True if the requirement was satisfied
 */
function checkRequirement(
  validator: OptionValidator,
  values: OpaqueOptionValues,
  specifiedKeys: Set<string>,
  entry: RequiresEntry,
  error: TerminalString,
  negate: boolean,
  invert: boolean,
): boolean {
  const [key, value] = entry;
  const actual = values[key];
  const option = validator.options[key];
  const specified = specifiedKeys.has(key) || actual !== undefined; // consider default values
  const required = value !== null;
  if (isMessage(option) || isUnknown(option) || !specified || !required || value === undefined) {
    if ((specified == required) != negate) {
      return true;
    }
    if (specified != invert) {
      error.addWord(validator.config.connectives[ConnectiveWords.no]);
    }
    format.o(option.preferredName ?? '', validator.config.styles, error);
    return false;
  }
  const spec = isBoolean(option) ? 'b' : isString(option) ? 's' : 'n';
  return checkRequiredValue(validator, option, negate, invert, actual, value, error, spec);
}

/**
 * Checks the required value of an option against a specified value.
 * @template T The type of the option value
 * @param validator The option validator
 * @param option The option definition
 * @param negate True if the requirement should be negated
 * @param invert True if the requirements should be inverted
 * @param actual The specified value
 * @param value The required value
 * @param error The terminal string error
 * @param spec The formatting specification
 * @returns True if the requirement was satisfied
 */
function checkRequiredValue<T>(
  validator: OptionValidator,
  option: OpaqueOption,
  negate: boolean,
  invert: boolean,
  actual: T,
  value: T,
  error: TerminalString,
  spec: string,
): boolean {
  /** @ignore */
  function norm<T>(val: T) {
    return validator.normalize(option, name, val);
  }
  const name = option.preferredName ?? '';
  const array = Array.isArray(value);
  const expected = array ? value.map(norm) : norm(value);
  if (array) {
    if (
      checkRequiredArray(
        actual as ReadonlyArray<unknown>,
        expected as ReadonlyArray<unknown>,
        negate,
        !!option.unique,
      )
    ) {
      return true;
    }
  } else if ((actual === expected) !== negate) {
    return true;
  }
  const config = validator.config;
  const connective =
    negate != invert
      ? config.connectives[ConnectiveWords.notEquals]
      : config.connectives[ConnectiveWords.equals];
  const phrase = array ? `[%${spec}]` : `%${spec}`;
  format.o(name, config.styles, error);
  error.addWord(connective).formatArgs(config.styles, phrase, { [spec]: expected });
  return false;
}
